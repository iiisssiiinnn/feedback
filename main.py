# main.py
import os
import sqlite3
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          ContextTypes, ConversationHandler, CallbackQueryHandler)

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [7585381324]  # –ó–¥–µ—Å—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)

REGISTER, GET_NAME, GET_POSITION, MAIN_MENU, HANDLE_MESSAGE = range(5)

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    position TEXT
)''')
conn.commit()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user:
        return await show_main_menu(update, context)
    else:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
        return GET_NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    return GET_POSITION

async def get_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data['name']
    position = update.message.text
    user_id = update.effective_user.id
    cursor.execute("INSERT OR REPLACE INTO users (user_id, name, position) VALUES (?, ?, ?)",
                   (user_id, name, position))
    conn.commit()
    return await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu = [["üì¢ –ñ–∞–ª–æ–±–∞", "üí° –ò–¥–µ—è"], ["üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ", "üìÑ FAQ"]]
    reply_markup = ReplyKeyboardMarkup(menu, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    return MAIN_MENU

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT name, position FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    name, position = result if result else ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "-")
    text = update.message.text

    if text == "üìÑ FAQ":
        await update.message.reply_text("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n1. –ö–æ–≥–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞?\n2. –ö–∞–∫ –≤–∑—è—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π?\n3. –ö –∫–æ–º—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–º–µ–Ω?")
    elif text in ["üì¢ –ñ–∞–ª–æ–±–∞", "üí° –ò–¥–µ—è", "üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ"]:
        context.user_data['category'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:")
        return HANDLE_MESSAGE
    else:
        category = context.user_data.get('category', '–°–æ–æ–±—â–µ–Ω–∏–µ')
        msg = f"üîî {category} –æ—Ç {name} ({position}):\n{text}"
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(chat_id=admin_id, text=msg)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return await show_main_menu(update, context)

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

    keyboard = [
        [InlineKeyboardButton("üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='notify')],
        [InlineKeyboardButton("üìä –û–ø—Ä–æ—Å", callback_data='poll')],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data='remove_user')]
    ]
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == 'notify':
        context.user_data['admin_action'] = 'notify'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    elif action == 'poll':
        context.user_data['admin_action'] = 'poll'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–æ–ø—Ä–æ—Å;–í–∞—Ä–∏–∞–Ω—Ç1;–í–∞—Ä–∏–∞–Ω—Ç2;...")
    elif action == 'remove_user':
        context.user_data['admin_action'] = 'remove_user'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ user_id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    return HANDLE_MESSAGE

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    action = context.user_data.get('admin_action')
    text = update.message.text

    if action == 'notify':
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        for (uid,) in users:
            await context.bot.send_message(chat_id=uid, text=f"üì£ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{text}")
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    elif action == 'poll':
        parts = text.split(';')
        question = parts[0]
        options = parts[1:]
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        for (uid,) in users:
            await context.bot.send_poll(chat_id=uid, question=question, options=options, is_anonymous=True)
        await update.message.reply_text("–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    elif action == 'remove_user':
        cursor.execute("DELETE FROM users WHERE user_id = ?", (text,))
        conn.commit()
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª.")

    return MAIN_MENU

if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_POSITION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_position)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
            HANDLE_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_message)]
        },
        fallbacks=[CommandHandler("admin", admin)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(admin_choice))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

